(()=>{"use strict";class e{constructor(e=null,t=null){this.value=e,this.nextNode=t}}const t=new class{constructor(){this.head=null}prepend(t){this.head=new e(t,this.head)}append(t){if(null===this.head)this.prepend(t);else{let n=this.head;for(;null!=n.nextNode;)n=n.nextNode;n.nextNode=new e(t)}}size(){let e=0,t=this.head;for(;null!=t;)e++,t=t.nextNode;return e}head(){return this.head}tail(){let e=this.head;for(;null!=e.nextNode;)e=e.nextNode;return e}at(e){let t=0,n=this.head;for(;t<e;)t++,(n=null)?console.log("out of range"):n=n.nextNode;return n}pop(){let e=this.head,t=null;for(;null!=e.nextNode;)t=e,e=e.nextNode;t.nextNode=null}contains(e){let t=this.head;for(;null!=t;){if(t.value=e)return!0;t=t.nextNode}return!1}find(e){let t=0,n=this.head;for(;null!=n;){if(n.value=e)return t;t++,n=n.nextNode}return null}toString(){let e=this.head,t="";for(;null!=e;)t+=`${e.value}->`,e=e.nextNode;return t+="null",t}insertAt(t,n){null==this.listHead&&this.prepend(t);let o=0,l=this.head,s=null;for(;o<n;)null==l?console.log("out of range"):(s=l,l=l.nextNode,o++);let r=new e(t);s.nextNode=r,r.nextNode=l}removeAt(e){if(null==this.listHead)return null;let t=0,n=this.head,o=null;for(;t<e;)null==n?console.log("out of range"):(o=n,n=n.nextNode,t++);o.nextNode=n.nextNode}};t.prepend("test1"),t.append("test2"),t.append("test3"),console.log(t.toString()),console.log(t.size()),console.log(t.head()),console.log(t.tail()),console.log(t.at(2)),console.log(t.at(4)),t.pop(),console.log(t.toString()),console.log(t.contains("test1")),console.log(t.find("test2")),t.prepend("test3"),console.log(t.toString()),t.insertAt("test4",2),console.log(t.toString()),t.insertAt("test5",8),console.log(t.toString()),t.removeAt(2),console.log(t.toString())})();